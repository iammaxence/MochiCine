{"ast":null,"code":"var _jsxFileName = \"/home/maxlamenace/eclipse_work2/MochiCine/React/src/Calendrier.js\";\nimport React, { Component } from 'react';\nimport './Calendrier.css';\nimport axios from 'axios';\nimport StarRatings from '../node_modules/react-star-ratings';\nimport favEmpty from './icons/favEmpty.png';\nimport favFull from './icons/favFull.png';\n\nclass Calendrier extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seriesListe: [],\n      filmsListe: [],\n      UserFavs: this.props.listFavoris\n    }; //this.addToFavoris=this.addToFavoris.bind();\n  }\n\n  componentDidMount() {\n    //console.log(\"Amount Calendrier\", this.state.UserFavs);\n    //Future release\n    axios.get(\"http://localhost:8080/MochiCine/SerieOfTheWeek\").then(res => this.setState({\n      seriesListe: res.data.data\n    }));\n    axios.get(\"http://localhost:8080/MochiCine/FilmsOnAir\").then(res => this.setState({\n      filmsListe: res.data.data\n    }));\n    /*\n    axios.get(\"https://api.themoviedb.org/3/tv/on_the_air?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> res.data.results).then(\n        ex => {\n            \n            //Find the serie to find the date of the last episode\n            //Cette partie est importante car on récupère beaucoup plus d'informations sur chacune des séries, que la requete précédente.\n            ex.map( key =>\n                axios.get(\"https://api.themoviedb.org/3/tv/\"+key.id+\"?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US\").then(\n                v => {\n                    \n                let tvserie=v.data;\n                let exdate= new Date(tvserie.last_air_date);\n                exdate.setHours(0,0,0,0);\n                //console.log(exdate);\n                //console.log(today.getTime()+\"==\"+exdate.getTime());\n                //if (today.getTime()===exdate.getTime()) \n                    //{   \n                        //Black Magic\n                        this.setState({lundiListe: [...this.state.lundiListe, tvserie]});\n                    //} \n                })\n            )\n                \n            });\n    //console.log(this.state.lundiListe);\n    //this.setState({lundiListe: mo});\n    */\n  } //Si series dans les favoris d'une utilisateur, coeur rempli sinon vide\n\n\n  handleAddFav(id, title, isSerie) {\n    this.props.addFavoris(id, title, isSerie);\n    this.setState({\n      UserFavs: this.props.listFavoris\n    }); //console.log(\"addCalendrier\", this.state.UserFavs);\n  }\n\n  handleDeleteFav(id, title, isSerie) {\n    const list = Object.assign([], this.state.UserFavs);\n    var index = list.indexOf(title);\n\n    if (index !== -1) {\n      list.splice(index, 1);\n      this.setState({\n        UserFavs: list\n      });\n    }\n\n    this.props.deleteFavoris(id, title, isSerie); //console.log(\"deleteCalendrier\", list);\n  } // GESTION DESCRIPTION PAGE\n\n\n  handleDescriptionPage(id, isMovie) {\n    const url = new URLSearchParams();\n    url.append('id', id);\n    url.append('isMovie', isMovie);\n    axios.get('http://localhost:8080/MochiCine/GetDescription?' + url).then(response => this.getDescription(response));\n  }\n\n  getDescription(rep) {\n    console.log(\"data of Description: \", rep.data);\n\n    if (rep.data != null) {\n      if (rep.data[\"code\"]) {\n        window.confirm(this.state.textError);\n      } else {\n        this.props.getDescriptionPage(rep.data[\"info\"]);\n      }\n    }\n  }\n\n  render() {\n    //On affiche les séries\n    let series = this.state.seriesListe.map(ex => {\n      //console.log(ex);\n      //console.log(ex.id);\n      //Pour le button des favoris afficher si seulement si l'utilisateur est connecter\n      let boxFav = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 24\n        }\n      });\n\n      if (this.props.isConnected === true) {\n        // Pour la mise a jour fav : Si pas un favoris de l'utilisateur favEmpty logo sinon favFull\n        let favImg = /*#__PURE__*/React.createElement(\"img\", {\n          src: favEmpty,\n          alt: \"favEmpty\",\n          width: \"10%\",\n          height: \"10%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 28\n          }\n        }); //Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.id)\n\n        if (Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.original_name)) {\n          favImg = /*#__PURE__*/React.createElement(\"img\", {\n            src: favFull,\n            alt: \"favFull\",\n            width: \"10%\",\n            height: \"10%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 28\n            }\n          });\n          boxFav = /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 30\n            }\n          }, \" \", favImg, /*#__PURE__*/React.createElement(\"button\", {\n            id: \"deletefavS\",\n            className: \" btnfav btn btn-rounded waves-effect\",\n            onClick: () => this.handleDeleteFav(ex.id, ex.original_name, \"true\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 33\n            }\n          }, \"Delete\"));\n        } else {\n          boxFav = /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 30\n            }\n          }, \" \", favImg, /*#__PURE__*/React.createElement(\"button\", {\n            id: \"addfavS\",\n            className: \" btnfav btn btn-rounded waves-effect\",\n            onClick: () => this.handleAddFav(ex.id, ex.original_name, \"true\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 33\n            }\n          }, \"Add\"));\n        }\n      } //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n\n\n      let nomRestreint = ex.original_name;\n\n      if (ex.original_name.length > 20) {\n        nomRestreint = ex.original_name.substring(0, 15) + \"...\";\n      }\n\n      const note = ex.vote_average * 5 / 10;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"bloc rounded-lg\",\n        key: ex.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: \"https://image.tmdb.org/t/p/w500/\" + (ex.backdrop_path || ex.poster_path),\n        alt: \"picture_of_\" + ex.name,\n        onClick: () => this.handleDescriptionPage(ex.id, \"false\"),\n        width: \"100%\",\n        height: \"150\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"stars\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(StarRatings, {\n        rating: note,\n        starRatedColor: \"yellow\",\n        numberOfStars: 5,\n        name: \"rating\",\n        starDimension: \"20px\",\n        starSpacing: \"1px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"titre\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        id: ex.id,\n        onClick: () => this.handleDescriptionPage(ex.id, \"false\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 29\n        }\n      }, nomRestreint), boxFav));\n    }); //On affiche les films\n\n    let films = this.state.filmsListe.map(ex => {\n      let boxFav = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 24\n        }\n      });\n\n      if (this.props.isConnected === true) {\n        // Pour la mise a jour fav : Si pas un favoris de l'utilisateur favEmpty logo sinon favFull\n        let favImg = /*#__PURE__*/React.createElement(\"img\", {\n          src: favEmpty,\n          alt: \"favEmpty\",\n          width: \"10%\",\n          height: \"10%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 28\n          }\n        });\n\n        if (Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.original_title)) {\n          favImg = /*#__PURE__*/React.createElement(\"img\", {\n            src: favFull,\n            alt: \"favFull\",\n            width: \"10%\",\n            height: \"10%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 28\n            }\n          });\n          boxFav = /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 30\n            }\n          }, favImg, /*#__PURE__*/React.createElement(\"button\", {\n            id: \"addfavS\",\n            className: \" btnfav btn btn-rounded waves-effect\",\n            onClick: () => this.handleDeleteFav(ex.id, ex.original_title, \"false\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 33\n            }\n          }, \"Delete\"));\n        } else {\n          boxFav = /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 30\n            }\n          }, favImg, /*#__PURE__*/React.createElement(\"button\", {\n            id: \"addfavS\",\n            className: \" btnfav btn btn-rounded waves-effect\",\n            onClick: () => this.handleAddFav(ex.id, ex.original_title, \"false\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 33\n            }\n          }, \"Add\"));\n        }\n      } //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n\n\n      let nomRestreint = ex.original_title;\n\n      if (ex.original_title.length > 20) {\n        nomRestreint = ex.original_title.substring(0, 15) + \"...\";\n      }\n\n      const note = ex.vote_average * 5 / 10;\n\n      if (ex.backdrop_path !== null && ex.backdrop_path !== undefined) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"bloc rounded-lg\",\n          key: ex.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: \"https://image.tmdb.org/t/p/w500/\" + (ex.backdrop_path || ex.poster_path),\n          alt: \"picture_of_\" + ex.title,\n          width: \"100%\",\n          height: \"150\",\n          onClick: () => this.handleDescriptionPage(ex.id, \"true\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"stars\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(StarRatings, {\n          rating: note,\n          starRatedColor: \"yellow\",\n          numberOfStars: 5,\n          name: \"rating\",\n          starDimension: \"20px\",\n          starSpacing: \"1px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"titre\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"a\", {\n          id: ex.id,\n          onClick: () => this.handleDescriptionPage(ex.id, \"true\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 29\n          }\n        }, nomRestreint), boxFav));\n      }\n    }); //console.log(tmp);\n    //axios.get(\"https://api.themoviedb.org/3/tv/airing_today?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> this.constr(res));\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Rectangle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"filmSortie\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }\n    }, \" Films sorties en 2020 \")), films, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"serieSortie\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }\n    }, \" Sortie des series des 7 derniers jours\")), series);\n  }\n\n}\n\nexport default Calendrier;","map":{"version":3,"sources":["/home/maxlamenace/eclipse_work2/MochiCine/React/src/Calendrier.js"],"names":["React","Component","axios","StarRatings","favEmpty","favFull","Calendrier","constructor","props","state","seriesListe","filmsListe","UserFavs","listFavoris","componentDidMount","get","then","res","setState","data","handleAddFav","id","title","isSerie","addFavoris","handleDeleteFav","list","Object","assign","index","indexOf","splice","deleteFavoris","handleDescriptionPage","isMovie","url","URLSearchParams","append","response","getDescription","rep","console","log","window","confirm","textError","getDescriptionPage","render","series","map","ex","boxFav","isConnected","favImg","Array","isArray","includes","original_name","nomRestreint","length","substring","note","vote_average","backdrop_path","poster_path","name","films","original_title","undefined"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Calendrier.css';\nimport axios from 'axios';\nimport StarRatings from '../node_modules/react-star-ratings';\nimport favEmpty from './icons/favEmpty.png';\nimport favFull from './icons/favFull.png';\n\nclass Calendrier extends Component{\n\n    constructor(props){\n        super(props);\n        this.state={seriesListe : [], filmsListe: [], UserFavs:this.props.listFavoris};\n        //this.addToFavoris=this.addToFavoris.bind();\n    }\n\n    componentDidMount(){\n        //console.log(\"Amount Calendrier\", this.state.UserFavs);\n        \n        //Future release\n        axios.get(\"http://localhost:8080/MochiCine/SerieOfTheWeek\").then(res=> this.setState({seriesListe: res.data.data}));\n\n        axios.get(\"http://localhost:8080/MochiCine/FilmsOnAir\").then(res=> this.setState({filmsListe: res.data.data}));\n        /*\n        axios.get(\"https://api.themoviedb.org/3/tv/on_the_air?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> res.data.results).then(\n            ex => {\n                \n                //Find the serie to find the date of the last episode\n                //Cette partie est importante car on récupère beaucoup plus d'informations sur chacune des séries, que la requete précédente.\n                ex.map( key =>\n                    axios.get(\"https://api.themoviedb.org/3/tv/\"+key.id+\"?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US\").then(\n                    v => {\n                        \n                    let tvserie=v.data;\n                    let exdate= new Date(tvserie.last_air_date);\n                    exdate.setHours(0,0,0,0);\n                    //console.log(exdate);\n                    //console.log(today.getTime()+\"==\"+exdate.getTime());\n                    //if (today.getTime()===exdate.getTime()) \n                        //{   \n                            //Black Magic\n                            this.setState({lundiListe: [...this.state.lundiListe, tvserie]});\n                        //} \n                    })\n                )\n                    \n                });\n        //console.log(this.state.lundiListe);\n        //this.setState({lundiListe: mo});\n        */\n    }\n\n    \n    //Si series dans les favoris d'une utilisateur, coeur rempli sinon vide\n    handleAddFav(id, title, isSerie){\n        this.props.addFavoris(id, title, isSerie)\n        this.setState({UserFavs: this.props.listFavoris});\n        //console.log(\"addCalendrier\", this.state.UserFavs);\n    }\n\n    handleDeleteFav(id, title, isSerie){   \n        const list = Object.assign([], this.state.UserFavs);\n        var index = list.indexOf(title);\n        if (index !== -1) {\n            list.splice(index, 1);\n            this.setState({UserFavs: list});\n        }\n\n        this.props.deleteFavoris(id, title, isSerie)\n        //console.log(\"deleteCalendrier\", list);\n    }\n\n    // GESTION DESCRIPTION PAGE\n    handleDescriptionPage(id, isMovie){\n        const url = new URLSearchParams();\n        url.append('id',id);\n        url.append('isMovie',isMovie);\n        axios.get('http://localhost:8080/MochiCine/GetDescription?'+url).then(response => this.getDescription(response));\n    \n    }\n\n    getDescription(rep){\n        console.log(\"data of Description: \", rep.data);\n        if(rep.data != null){\n            if(rep.data[\"code\"]){\n                window.confirm(this.state.textError);\n            }else{\n                this.props.getDescriptionPage(rep.data[\"info\"]);\n            } \n        }\n    }\n\n    \n    render(){\n        //On affiche les séries\n        let series = this.state.seriesListe.map(ex => {\n            //console.log(ex);\n            //console.log(ex.id);\n\n            //Pour le button des favoris afficher si seulement si l'utilisateur est connecter\n            let boxFav=<div></div>\n            if(this.props.isConnected === true){\n                // Pour la mise a jour fav : Si pas un favoris de l'utilisateur favEmpty logo sinon favFull\n                let favImg=<img src={favEmpty} alt=\"favEmpty\" width=\"10%\" height=\"10%\" />;\n\n                //Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.id)\n                if (Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.original_name)){\n                    favImg=<img src={favFull} alt=\"favFull\" width=\"10%\" height=\"10%\" />;\n                    boxFav = <div> {favImg}\n                                <button id= \"deletefavS\" className=\" btnfav btn btn-rounded waves-effect\" onClick={() => this.handleDeleteFav(ex.id, ex.original_name, \"true\")} >Delete</button>\n                            </div>\n                }else{\n                    boxFav = <div> {favImg}\n                                <button id= \"addfavS\" className=\" btnfav btn btn-rounded waves-effect\" onClick={() => this.handleAddFav(ex.id,ex.original_name, \"true\")} >Add</button>\n                            </div>\n                }\n             } \n\n\n            //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n            let nomRestreint=ex.original_name;\n             if (ex.original_name.length>20){\n                nomRestreint=ex.original_name.substring(0,15)+\"...\";\n            }\n\n \n\n\n            const note=(ex.vote_average*5)/10;\n                return(\n                    \n                    <div className=\"bloc rounded-lg\" key={ex.id} > \n                        <img src={\"https://image.tmdb.org/t/p/w500/\"+(ex.backdrop_path || ex.poster_path)} alt={\"picture_of_\"+ex.name}  onClick={() =>  this.handleDescriptionPage(ex.id, \"false\")}  width=\"100%\" height=\"150\"/>\n                        <div className=\"stars\">\n                            <StarRatings rating={note} starRatedColor=\"yellow\" numberOfStars={5} name='rating' starDimension=\"20px\"starSpacing=\"1px\">\n                            </StarRatings>\n                        </div>\n                        <div className=\"titre\">\n                            <a id={ex.id} onClick={() => this.handleDescriptionPage(ex.id, \"false\")} >{nomRestreint}</a>\n                            {boxFav}\n                        </div>\n                    </div>\n                   \n                )\n                \n        })\n        //On affiche les films\n        let films = this.state.filmsListe.map(ex => {\n\n            let boxFav=<div></div>\n            if(this.props.isConnected === true){\n                // Pour la mise a jour fav : Si pas un favoris de l'utilisateur favEmpty logo sinon favFull\n                let favImg=<img src={favEmpty} alt=\"favEmpty\" width=\"10%\" height=\"10%\" />;\n                if (Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.original_title)){\n                    favImg=<img src={favFull} alt=\"favFull\" width=\"10%\" height=\"10%\" />;\n\n                    boxFav = <div>{favImg}\n                                <button id= \"addfavS\" className=\" btnfav btn btn-rounded waves-effect\" onClick={() => this.handleDeleteFav(ex.id, ex.original_title, \"false\")} >Delete</button>\n                            </div>\n                }else{\n                    boxFav = <div>{favImg}\n                                <button id= \"addfavS\" className=\" btnfav btn btn-rounded waves-effect\" onClick={() => this.handleAddFav(ex.id, ex.original_title, \"false\")} >Add</button>\n                            </div>\n                }\n\n            } \n\n\n\n            //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n            let nomRestreint=ex.original_title;\n             if (ex.original_title.length>20){\n                nomRestreint=ex.original_title.substring(0,15)+\"...\";\n            }\n\n\n\n\n            const note= (ex.vote_average*5)/10;\n\n            if(ex.backdrop_path!==null && ex.backdrop_path!==undefined){\n                return(\n                    \n                    <div className=\"bloc rounded-lg\" key={ex.id}> \n                        <img src={\"https://image.tmdb.org/t/p/w500/\"+(ex.backdrop_path || ex.poster_path)} alt={\"picture_of_\"+ex.title} width=\"100%\" height=\"150\" onClick={() => this.handleDescriptionPage(ex.id, \"true\")}/>\n                        <div className=\"stars\">\n                            <StarRatings rating={note} starRatedColor=\"yellow\" numberOfStars={5} name='rating' starDimension=\"20px\"starSpacing=\"1px\">\n                            </StarRatings>\n                        </div>\n                        <div className=\"titre\">\n                            <a id={ex.id} onClick={() => this.handleDescriptionPage(ex.id, \"true\")} >{nomRestreint}</a>\n                            {boxFav}\n                        </div>\n                    </div>\n                   \n                )\n            }    \n        })\n\n\n        \n        //console.log(tmp);\n        //axios.get(\"https://api.themoviedb.org/3/tv/airing_today?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> this.constr(res));\n        return (\n            <div className=\"Rectangle\">\n                <div className=\"filmSortie\">\n                    <h2> Films sorties en 2020 </h2>\n                </div>\n                {films}\n                <div className=\"serieSortie\">\n                    <h2> Sortie des series des 7 derniers jours</h2>\n                </div>\n               {series}\n\n            </div>  \n        )\n    }\n}\n\nexport default Calendrier;"]},"metadata":{},"sourceType":"module"}