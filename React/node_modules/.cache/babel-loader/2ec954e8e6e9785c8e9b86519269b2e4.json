{"ast":null,"code":"var _jsxFileName = \"/home/maxlamenace/eclipse_work2/MochiCine/React/src/Actualite.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport \"./Actualite.css\";\n\nclass Actualite extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      topmovies: []\n    };\n  }\n\n  componentDidMount() {\n    // Recuperation top series et films\n    let key = \"a3be1be132d237a0716cc27bdae1b2f0\";\n    axios.get(\"http://localhost:8080/MochiCine/TendanceFilms?key=\" + key).then(res => this.setState({\n      topmovies: res.data.data\n    }));\n  }\n\n  render() {\n    //On affiche les séries\n    let series = this.state.seriesListe.map(ex => {\n      //Pour le button des favoris afficher si seulement si l'utilisateur est connecter\n      let boxFav = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 24\n        }\n      });\n\n      if (this.props.isConnected === true) {\n        // Pour la mise a jour fav : Si pas un favoris de l'utilisateur favEmpty logo sinon favFull\n        let favImg = /*#__PURE__*/React.createElement(\"img\", {\n          src: favEmpty,\n          alt: \"favEmpty\",\n          width: \"20%\",\n          height: \"20%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 28\n          }\n        }); //Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.id)\n\n        if (Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.original_name)) {\n          favImg = /*#__PURE__*/React.createElement(\"img\", {\n            src: favFull,\n            alt: \"favFull\",\n            width: \"20%\",\n            height: \"20%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 28\n            }\n          });\n          boxFav = /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 30\n            }\n          }, \" \", favImg, /*#__PURE__*/React.createElement(\"button\", {\n            id: \"deletefavS\",\n            className: \" btnfav btn btn-rounded waves-effect\",\n            onClick: () => this.handleDeleteFav(ex.id, ex.original_name, \"true\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 33\n            }\n          }, \"Delete\"));\n        } else {\n          boxFav = /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 30\n            }\n          }, \" \", favImg, /*#__PURE__*/React.createElement(\"button\", {\n            id: \"addfavS\",\n            className: \" btnfav btn btn-rounded waves-effect\",\n            onClick: () => this.handleAddFav(ex.id, ex.original_name, \"true\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 33\n            }\n          }, \"Add\"));\n        }\n      } //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n\n\n      let nomRestreint = ex.original_name;\n\n      if (ex.original_name.length > 20) {\n        nomRestreint = ex.original_name.substring(0, 15) + \"...\";\n      }\n\n      const note = ex.vote_average * 5 / 10;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"bloc rounded-lg\",\n        key: ex.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: \"https://image.tmdb.org/t/p/w500/\" + ex.backdrop_path,\n        alt: \"pic_of_\" + ex.name,\n        onClick: () => this.handleDescriptionPage(ex.id, \"false\"),\n        width: \"100%\",\n        height: \"150\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"stars\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(StarRatings, {\n        rating: note,\n        starRatedColor: \"yellow\",\n        numberOfStars: 5,\n        name: \"rating\",\n        starDimension: \"20px\",\n        starSpacing: \"1px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"titre\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        id: ex.id,\n        onClick: () => this.handleDescriptionPage(ex.id, \"false\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 29\n        }\n      }, nomRestreint), boxFav));\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ActualitePage rounded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 16\n      }\n    }, \"TOP FILMS\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 16\n      }\n    }, \"TOP SERIES\"));\n  }\n\n}\n\nexport default Actualite;","map":{"version":3,"sources":["/home/maxlamenace/eclipse_work2/MochiCine/React/src/Actualite.js"],"names":["React","axios","Actualite","Component","constructor","props","state","topmovies","componentDidMount","key","get","then","res","setState","data","render","series","seriesListe","map","ex","boxFav","isConnected","favImg","favEmpty","Array","isArray","UserFavs","includes","original_name","favFull","handleDeleteFav","id","handleAddFav","nomRestreint","length","substring","note","vote_average","backdrop_path","name","handleDescriptionPage"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport \"./Actualite.css\"\n\nclass Actualite extends React.Component {\n    constructor(props){\n        super(props);\n        this.state= {topmovies : []}\n    }\n\n\ncomponentDidMount(){\n    // Recuperation top series et films\n    let key = \"a3be1be132d237a0716cc27bdae1b2f0\";\n    axios.get(\"http://localhost:8080/MochiCine/TendanceFilms?key=\"+key).then(res=> this.setState({topmovies: res.data.data}));\n\n       \n    }    \n\n\n\n    render(){\n        //On affiche les séries\n        let series = this.state.seriesListe.map(ex => {\n            //Pour le button des favoris afficher si seulement si l'utilisateur est connecter\n            let boxFav=<div></div>\n            if(this.props.isConnected === true){\n                // Pour la mise a jour fav : Si pas un favoris de l'utilisateur favEmpty logo sinon favFull\n                let favImg=<img src={favEmpty} alt=\"favEmpty\" width=\"20%\" height=\"20%\" />;\n\n                //Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.id)\n                if (Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.original_name)){\n                    favImg=<img src={favFull} alt=\"favFull\" width=\"20%\" height=\"20%\" />;\n                    boxFav = <div> {favImg}\n                                <button id= \"deletefavS\" className=\" btnfav btn btn-rounded waves-effect\" onClick={() => this.handleDeleteFav(ex.id, ex.original_name, \"true\")} >Delete</button>\n                            </div>\n                }else{\n                    boxFav = <div> {favImg}\n                                <button id= \"addfavS\" className=\" btnfav btn btn-rounded waves-effect\" onClick={() => this.handleAddFav(ex.id,ex.original_name, \"true\")} >Add</button>\n                            </div>\n                }\n             } \n\n\n\n\n\n            //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n            let nomRestreint=ex.original_name;\n             if (ex.original_name.length>20){\n                nomRestreint=ex.original_name.substring(0,15)+\"...\";\n            }\n\n\n        \n\n\n            const note=(ex.vote_average*5)/10;\n                return(\n                    \n                    <div className=\"bloc rounded-lg\" key={ex.id} > \n                        <img src={\"https://image.tmdb.org/t/p/w500/\"+ex.backdrop_path} alt={\"pic_of_\"+ex.name}  onClick={() =>  this.handleDescriptionPage(ex.id, \"false\")}  width=\"100%\" height=\"150\"/>\n                        <div className=\"stars\">\n                            <StarRatings rating={note} starRatedColor=\"yellow\" numberOfStars={5} name='rating' starDimension=\"20px\"starSpacing=\"1px\">\n                            </StarRatings>\n                        </div>\n                        <div className=\"titre\">\n                            <a id={ex.id} onClick={() => this.handleDescriptionPage(ex.id, \"false\")} >{nomRestreint}</a>\n                            {boxFav}\n                        </div>\n                    </div>\n                   \n                )\n                \n        })\n          return(\n            <div className=\"ActualitePage rounded\">\n               <div>\n                   TOP FILMS\n               </div>\n               <div>\n                   TOP SERIES\n               </div>\n\n            </div>\n          );\n    }\n}\nexport default Actualite"]},"metadata":{},"sourceType":"module"}