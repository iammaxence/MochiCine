{"ast":null,"code":"var _jsxFileName = \"/home/maxlamenace/eclipse_work2/MochiCine/React/src/Actualite.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport \"./Actualite.css\";\nimport StarRatings from '../node_modules/react-star-ratings';\n\nclass Actualite extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      topmovies: [],\n      topseries: []\n    };\n  }\n\n  componentDidMount() {\n    // Recuperation top series et films\n    let key = \"a3be1be132d237a0716cc27bdae1b2f0\";\n    let count = 6;\n    let type = \"movie\";\n    axios.get(\"http://localhost:8080/MochiCine/Tendances?key=\" + key + \"&count=\" + count + \"&type=\" + type).then(res => this.setState({\n      topmovies: res.data.data\n    }));\n    type = \"tv\";\n    axios.get(\"http://localhost:8080/MochiCine/Tendances?key=\" + key + \"&count=\" + count + \"&type=\" + type).then(res => this.setState({\n      topseries: res.data.data\n    }));\n  } // GESTION DESCRIPTION PAGE\n\n\n  handleDescriptionPage(id, isMovie) {\n    const url = new URLSearchParams();\n    url.append('id', id);\n    url.append('isMovie', isMovie);\n    axios.get('http://localhost:8080/MochiCine/GetDescription?' + url).then(response => this.getDescription(response));\n  }\n\n  getDescription(rep) {\n    console.log(\"data of Description: \", rep.data);\n\n    if (rep.data != null) {\n      if (rep.data[\"code\"]) {\n        window.confirm(this.state.textError);\n      } else {\n        this.props.getDescriptionPage(rep.data[\"info\"]);\n      }\n    }\n  }\n\n  render() {\n    //On affiche les films\n    let films;\n\n    if (this.state.topmovies === undefined || this.state.topmovies.length === 0) {\n      films = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }\n      }, \"Nothing Found\"));\n    } else if (!Array.isArray(this.state.topmovies)) {\n      //Cette condition est obligatoire car lorsque la navbar appel ce composant, il est démonté puis remonté. Il n'est pas monté assez rapidement pour laisser le temps à la requête d'être terminé\n      films = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 20\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }\n      }, \"Nothing Found\"));\n    } else {\n      films = this.state.topmovies.map(ex => {\n        //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n        let nomRestreint = ex.original_title;\n\n        if (ex.original_title.length > 25) {\n          nomRestreint = ex.original_title.substring(0, 25) + \"...\";\n        }\n\n        const note = ex.vote_average * 5 / 10;\n\n        if (ex.backdrop_path !== null && ex.backdrop_path !== undefined) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"bloctop rounded-lg\",\n            key: ex.id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"img\", {\n            src: \"https://image.tmdb.org/t/p/w500/\" + ex.backdrop_path,\n            alt: \"pic_of_\" + ex.title,\n            width: \"100%\",\n            height: \"150\",\n            onClick: () => this.handleDescriptionPage(ex.id, \"true\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"stars\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(StarRatings, {\n            rating: note,\n            starRatedColor: \"yellow\",\n            numberOfStars: 5,\n            name: \"rating\",\n            starDimension: \"20px\",\n            starSpacing: \"1px\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 29\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"titre\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"a\", {\n            id: ex.id,\n            onClick: () => this.handleDescriptionPage(ex.id, \"true\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 29\n            }\n          }, nomRestreint)));\n        }\n      });\n    }\n\n    let series;\n\n    if (this.state.topseries === undefined || this.state.topseries.length === 0) {\n      series = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 26\n        }\n      }, \"Nothing Found\"));\n    } else if (!Array.isArray(this.state.topmovies)) {\n      //Cette condition est obligatoire car lorsque la navbar appel ce composant, il est démonté puis remonté. Il n'est pas monté assez rapidement pour laisser le temps à la requête d'être terminé\n      series = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 22\n        }\n      }, \"Nothing Found\"));\n    } else {\n      //On affiche les series\n      series = this.state.topseries.map(ex => {\n        //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n        let nomRestreint = ex.original_name;\n\n        if (ex.original_name.length > 25) {\n          nomRestreint = ex.original_name.substring(0, 25) + \"...\";\n        }\n\n        const note = ex.vote_average * 5 / 10;\n\n        if (ex.backdrop_path !== null && ex.backdrop_path !== undefined) {\n          return /*#__PURE__*/React.createElement(\"div\", {\n            className: \"bloctop rounded-lg\",\n            key: ex.id,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(\"img\", {\n            src: \"https://image.tmdb.org/t/p/w500/\" + ex.backdrop_path,\n            alt: \"picture_of_\" + ex.name,\n            width: \"100%\",\n            height: \"150\",\n            onClick: () => this.handleDescriptionPage(ex.id, \"false\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 25\n            }\n          }), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"stars\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(StarRatings, {\n            rating: note,\n            starRatedColor: \"yellow\",\n            numberOfStars: 5,\n            name: \"rating\",\n            starDimension: \"20px\",\n            starSpacing: \"1px\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 29\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            className: \"titre\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(\"a\", {\n            id: ex.id,\n            onClick: () => this.handleDescriptionPage(ex.id, \"true\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 29\n            }\n          }, nomRestreint)));\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ActualitePage rounded\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topmovie\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 20\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 24\n      }\n    }, \"TOP FILMS\")), films), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topmovie\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 24\n      }\n    }, \"TOP SERIES\")), series));\n  }\n\n}\n\nexport default Actualite;","map":{"version":3,"sources":["/home/maxlamenace/eclipse_work2/MochiCine/React/src/Actualite.js"],"names":["React","axios","StarRatings","Actualite","Component","constructor","props","state","topmovies","topseries","componentDidMount","key","count","type","get","then","res","setState","data","handleDescriptionPage","id","isMovie","url","URLSearchParams","append","response","getDescription","rep","console","log","window","confirm","textError","getDescriptionPage","render","films","undefined","length","Array","isArray","map","ex","nomRestreint","original_title","substring","note","vote_average","backdrop_path","title","series","original_name","name"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport \"./Actualite.css\"\nimport StarRatings from '../node_modules/react-star-ratings';\n\n\nclass Actualite extends React.Component {\n    constructor(props){\n        super(props);\n        this.state= {topmovies : [],topseries : []}\n    }\n\n\n    componentDidMount(){\n        // Recuperation top series et films\n        let key = \"a3be1be132d237a0716cc27bdae1b2f0\";\n        let count= 6;\n        let type= \"movie\";\n        axios.get(\"http://localhost:8080/MochiCine/Tendances?key=\"+key+\"&count=\"+count+\"&type=\"+type).then(res=> this.setState({topmovies: res.data.data}));\n\n        type= \"tv\";\n        axios.get(\"http://localhost:8080/MochiCine/Tendances?key=\"+key+\"&count=\"+count+\"&type=\"+type).then(res=> this.setState({topseries: res.data.data}));\n        \n        }    \n\n    // GESTION DESCRIPTION PAGE\n    handleDescriptionPage(id, isMovie){\n        const url = new URLSearchParams();\n        url.append('id',id);\n        url.append('isMovie',isMovie);\n        axios.get('http://localhost:8080/MochiCine/GetDescription?'+url).then(response => this.getDescription(response));\n    \n    }\n\n    getDescription(rep){\n        console.log(\"data of Description: \", rep.data);\n        if(rep.data != null){\n            if(rep.data[\"code\"]){\n                window.confirm(this.state.textError);\n            }else{\n                this.props.getDescriptionPage(rep.data[\"info\"]);\n            } \n        }\n    }\n\n\n    render(){\n        //On affiche les films\n        let films;\n\n        if (this.state.topmovies === undefined || this.state.topmovies.length === 0 ){\n            films= <div><strong>Nothing Found</strong></div>\n        }\n        else if (!Array.isArray(this.state.topmovies)) { //Cette condition est obligatoire car lorsque la navbar appel ce composant, il est démonté puis remonté. Il n'est pas monté assez rapidement pour laisser le temps à la requête d'être terminé\n            films= <div><strong>Nothing Found</strong></div>\n        } \n        else {\n            films = this.state.topmovies.map(ex => {\n\n            //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n            let nomRestreint=ex.original_title;\n             if (ex.original_title.length>25){\n                nomRestreint=ex.original_title.substring(0,25)+\"...\";\n            }\n\n\n\n\n            const note= (ex.vote_average*5)/10;\n            \n            if(ex.backdrop_path!==null && ex.backdrop_path!==undefined){\n                return(\n                    \n                    <div className=\"bloctop rounded-lg\" key={ex.id}> \n                        <img src={\"https://image.tmdb.org/t/p/w500/\"+ex.backdrop_path} alt={\"pic_of_\"+ex.title} width=\"100%\" height=\"150\" onClick={() => this.handleDescriptionPage(ex.id, \"true\")}/>\n                        <div className=\"stars\">\n                            <StarRatings rating={note} starRatedColor=\"yellow\" numberOfStars={5} name='rating' starDimension=\"20px\"starSpacing=\"1px\">\n                            </StarRatings>\n                        </div>\n                        <div className=\"titre\">\n                            <a id={ex.id} onClick={() => this.handleDescriptionPage(ex.id, \"true\")} >{nomRestreint}</a>\n                        </div>\n                    </div>\n                   \n                )\n            }    \n            })\n        }\n\n        let series; \n        if (this.state.topseries === undefined || this.state.topseries.length === 0 ){\n            series= <div><strong>Nothing Found</strong></div>\n        }\n        else if (!Array.isArray(this.state.topmovies)) { //Cette condition est obligatoire car lorsque la navbar appel ce composant, il est démonté puis remonté. Il n'est pas monté assez rapidement pour laisser le temps à la requête d'être terminé\n        series= <div><strong>Nothing Found</strong></div>\n        } \n        else {\n        //On affiche les series\n            series = this.state.topseries.map(ex => {\n\n            //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n            let nomRestreint=ex.original_name;\n            if (ex.original_name.length > 25){\n                nomRestreint=ex.original_name.substring(0,25)+\"...\";\n            }\n\n\n\n\n            const note= (ex.vote_average*5)/10;\n            \n            if(ex.backdrop_path!==null && ex.backdrop_path!==undefined){\n                return(\n                    \n                    <div className=\"bloctop rounded-lg\" key={ex.id}> \n                        <img src={\"https://image.tmdb.org/t/p/w500/\"+ex.backdrop_path} alt={\"picture_of_\"+ex.name} width=\"100%\" height=\"150\" onClick={() => this.handleDescriptionPage(ex.id, \"false\")}/>\n                        <div className=\"stars\">\n                            <StarRatings rating={note} starRatedColor=\"yellow\" numberOfStars={5} name='rating' starDimension=\"20px\"starSpacing=\"1px\">\n                            </StarRatings>\n                        </div>\n                        <div className=\"titre\">\n                            <a id={ex.id} onClick={() => this.handleDescriptionPage(ex.id, \"true\")} >{nomRestreint}</a>\n                        </div>\n                    </div>\n                   \n                )\n            }    \n            })\n        }\n          return(\n            <div className=\"ActualitePage rounded\">\n               <div>\n                   <div className=\"topmovie\">\n                       <strong>TOP FILMS</strong>\n                   </div>\n                   {films}\n               </div>\n               <div>\n                 <div className=\"topmovie\">\n                       <strong>TOP SERIES</strong>\n                 </div>\n                 {series}\n               </div>\n\n            </div>\n          );\n    }\n}\nexport default Actualite"]},"metadata":{},"sourceType":"module"}