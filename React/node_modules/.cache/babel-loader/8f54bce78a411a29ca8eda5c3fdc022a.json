{"ast":null,"code":"var _jsxFileName = \"/home/neko/git/MochiCine/React/src/Calendrier.js\";\nimport React, { Component } from 'react';\nimport './Calendrier.css';\nimport axios from 'axios';\nimport StarRatings from '../node_modules/react-star-ratings';\nimport favEmpty from './icons/favEmpty.png';\nimport favFull from './icons/favFull.png';\n\nclass Calendrier extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seriesListe: [],\n      filmsListe: [],\n      UserFavs: []\n    }; //this.addToFavoris=this.addToFavoris.bind();\n  }\n\n  componentDidMount() {\n    //Today release\n    //axios.get(\"https://api.themoviedb.org/3/tv/airing_today?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> this.constr(res));\n    //Future release\n    axios.get(\"http://localhost:8080/MochiCine/SerieOfTheWeek\").then(res => this.setState({\n      seriesListe: res.data.data\n    }));\n    axios.get(\"http://localhost:8080/MochiCine/FilmsOnAir\").then(res => this.setState({\n      filmsListe: res.data.data\n    }));\n    /*\n    axios.get(\"https://api.themoviedb.org/3/tv/on_the_air?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> res.data.results).then(\n        ex => {\n            \n            //Find the serie to find the date of the last episode\n            //Cette partie est importante car on récupère beaucoup plus d'informations sur chacune des séries, que la requete précédente.\n            ex.map( key =>\n                axios.get(\"https://api.themoviedb.org/3/tv/\"+key.id+\"?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US\").then(\n                v => {\n                    \n                let tvserie=v.data;\n                let exdate= new Date(tvserie.last_air_date);\n                exdate.setHours(0,0,0,0);\n                //console.log(exdate);\n                //console.log(today.getTime()+\"==\"+exdate.getTime());\n                //if (today.getTime()===exdate.getTime()) \n                    //{   \n                        //Black Magic\n                        this.setState({lundiListe: [...this.state.lundiListe, tvserie]});\n                    //} \n                })\n            )\n                \n            });\n    //console.log(this.state.lundiListe);\n    //this.setState({lundiListe: mo});\n    */\n  } //Si series dans les favoris d'une utilisateur, coeur rempli sinon vide\n\n\n  addToFavoris(res) {\n    //AddToFavs\n    console.log(this.state.UserFavs);\n\n    if (Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(res.id)) {\n      // S'il est dedans, on le retire des favs dans mongodb\n      this.setState({\n        UserFavs: []\n      });\n    } else {\n      // On l'ajoute aux favs dans mongodb\n      this.setState({\n        UserFavs: [...this.state.UserFavs, res.id]\n      });\n    }\n  } // GESTION DESCRIPTION PAGE\n\n\n  handleDescriptionPage(id, isMovie) {\n    const url = new URLSearchParams();\n    url.append('id', id);\n    url.append('isMovie', isMovie);\n    axios.get('http://localhost:8080/MochiCine/GetDescription?' + url).then(response => this.getDescription(response));\n  }\n\n  getDescription(rep) {\n    if (rep.data != null) {\n      if (rep.data[\"code\"]) {\n        window.confirm(this.state.textError);\n      } else {\n        this.props.getDescriptionPage(rep.data[\"info\"]);\n      }\n    }\n  }\n\n  render() {\n    //On affiche les séries\n    let series = this.state.seriesListe.map(ex => {\n      //console.log(ex);\n      //console.log(ex.id);\n      // Pour la mise a jour fav : Si pas un favoris de l'utilisateur favEmpty logo sinon favFull\n      let favImg = /*#__PURE__*/React.createElement(\"img\", {\n        src: favEmpty,\n        alt: \"favEmpty\",\n        width: \"20%\",\n        height: \"20%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 24\n        }\n      });\n\n      if (Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.id)) {\n        favImg = /*#__PURE__*/React.createElement(\"img\", {\n          src: favFull,\n          alt: \"favFull\",\n          width: \"20%\",\n          height: \"20%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 24\n          }\n        });\n      } //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n\n\n      let nomRestreint = ex.name;\n\n      if (ex.name.length > 20) {\n        nomRestreint = ex.name.substring(0, 15) + \"...\";\n      }\n\n      let boxFav = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 24\n        }\n      });\n\n      if (this.props.isConnected === true) {\n        boxFav = /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }\n        }, favImg, /*#__PURE__*/React.createElement(\"button\", {\n          id: \"addfavS\",\n          className: \" btnfav btn btn-rounded waves-effect\",\n          onClick: () => this.addToFavoris(ex),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 28\n          }\n        }, \"Ajouter\"));\n      }\n\n      const note = ex.vote_average * 5 / 10;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"bloc rounded-lg\",\n        key: ex.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: \"https://image.tmdb.org/t/p/w500/\" + ex.backdrop_path,\n        alt: \"pic_of_\" + ex.name,\n        onClick: () => this.props.getDescriptionPage(ex),\n        width: \"100%\",\n        height: \"150\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"stars\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(StarRatings, {\n        rating: note,\n        starRatedColor: \"yellow\",\n        numberOfStars: 5,\n        name: \"rating\",\n        starDimension: \"20px\",\n        starSpacing: \"1px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"titre\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        id: ex.id,\n        onClick: () => this.handleDescriptionPage(ex.id, \"false\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 29\n        }\n      }, nomRestreint), boxFav));\n    }); //On affiche les films\n\n    let films = this.state.filmsListe.map(ex => {\n      // Pour la mise a jour fav : Si pas un favoris de l'utilisateur favEmpty logo sinon favFull\n      let favImg = /*#__PURE__*/React.createElement(\"img\", {\n        src: favEmpty,\n        alt: \"favEmpty\",\n        width: \"20%\",\n        height: \"20%\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 24\n        }\n      });\n\n      if (Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.id)) {\n        favImg = /*#__PURE__*/React.createElement(\"img\", {\n          src: favFull,\n          alt: \"favFull\",\n          width: \"20%\",\n          height: \"20%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 24\n          }\n        });\n      } //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n\n\n      let nomRestreint = ex.title;\n\n      if (ex.title.length > 20) {\n        nomRestreint = ex.title.substring(0, 15) + \"...\";\n      }\n\n      let boxFav = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 24\n        }\n      });\n\n      if (this.props.isConnected === true) {\n        boxFav = /*#__PURE__*/React.createElement(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }\n        }, favImg, /*#__PURE__*/React.createElement(\"button\", {\n          id: \"addfavS\",\n          className: \" btnfav btn btn-rounded waves-effect\",\n          onClick: () => this.addToFavoris(ex),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 28\n          }\n        }, \"Ajouter\"));\n      }\n\n      const note = ex.vote_average * 5 / 10;\n\n      if (ex.backdrop_path !== null && ex.backdrop_path !== undefined) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"bloc rounded-lg\",\n          key: ex.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: \"https://image.tmdb.org/t/p/w500/\" + ex.backdrop_path,\n          alt: \"pic_of_\" + ex.title,\n          width: \"100%\",\n          height: \"150\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"stars\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(StarRatings, {\n          rating: note,\n          starRatedColor: \"yellow\",\n          numberOfStars: 5,\n          name: \"rating\",\n          starDimension: \"20px\",\n          starSpacing: \"1px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"titre\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"a\", {\n          id: ex.id,\n          onClick: () => this.handleDescriptionPage(ex.id, \"true\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 29\n          }\n        }, nomRestreint), boxFav));\n      }\n    }); //console.log(tmp);\n    //axios.get(\"https://api.themoviedb.org/3/tv/airing_today?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> this.constr(res));\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Rectangle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Jours\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }\n    }, \" Sortie des series des 7 derniers jours\")), series, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Jours\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }\n    }, \" Films sorties en 2020 \")), films);\n  }\n\n}\n\nexport default Calendrier;","map":{"version":3,"sources":["/home/neko/git/MochiCine/React/src/Calendrier.js"],"names":["React","Component","axios","StarRatings","favEmpty","favFull","Calendrier","constructor","props","state","seriesListe","filmsListe","UserFavs","componentDidMount","get","then","res","setState","data","addToFavoris","console","log","Array","isArray","includes","id","handleDescriptionPage","isMovie","url","URLSearchParams","append","response","getDescription","rep","window","confirm","textError","getDescriptionPage","render","series","map","ex","favImg","nomRestreint","name","length","substring","boxFav","isConnected","note","vote_average","backdrop_path","films","title","undefined"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Calendrier.css';\nimport axios from 'axios';\nimport StarRatings from '../node_modules/react-star-ratings';\nimport favEmpty from './icons/favEmpty.png';\nimport favFull from './icons/favFull.png';\n\nclass Calendrier extends Component{\n\n    constructor(props){\n        super(props);\n        this.state={seriesListe : [], filmsListe: [], UserFavs: []};\n        //this.addToFavoris=this.addToFavoris.bind();\n    }\n\n    componentDidMount(){\n\n        \n        //Today release\n        //axios.get(\"https://api.themoviedb.org/3/tv/airing_today?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> this.constr(res));\n        \n        //Future release\n        axios.get(\"http://localhost:8080/MochiCine/SerieOfTheWeek\").then(res=> this.setState({seriesListe: res.data.data}));\n\n        axios.get(\"http://localhost:8080/MochiCine/FilmsOnAir\").then(res=> this.setState({filmsListe: res.data.data}));\n        /*\n        axios.get(\"https://api.themoviedb.org/3/tv/on_the_air?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> res.data.results).then(\n            ex => {\n                \n                //Find the serie to find the date of the last episode\n                //Cette partie est importante car on récupère beaucoup plus d'informations sur chacune des séries, que la requete précédente.\n                ex.map( key =>\n                    axios.get(\"https://api.themoviedb.org/3/tv/\"+key.id+\"?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US\").then(\n                    v => {\n                        \n                    let tvserie=v.data;\n                    let exdate= new Date(tvserie.last_air_date);\n                    exdate.setHours(0,0,0,0);\n                    //console.log(exdate);\n                    //console.log(today.getTime()+\"==\"+exdate.getTime());\n                    //if (today.getTime()===exdate.getTime()) \n                        //{   \n                            //Black Magic\n                            this.setState({lundiListe: [...this.state.lundiListe, tvserie]});\n                        //} \n                    })\n                )\n                    \n                });\n        //console.log(this.state.lundiListe);\n        //this.setState({lundiListe: mo});\n        */\n    }\n\n    \n    //Si series dans les favoris d'une utilisateur, coeur rempli sinon vide\n    addToFavoris(res){\n        //AddToFavs\n        console.log(this.state.UserFavs)\n        if (Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(res.id)){ // S'il est dedans, on le retire des favs dans mongodb\n            this.setState({UserFavs: []});\n        }\n        else{ // On l'ajoute aux favs dans mongodb\n            this.setState({UserFavs: [...this.state.UserFavs,res.id]});\n        }\n            \n    }\n\n    // GESTION DESCRIPTION PAGE\n    handleDescriptionPage(id, isMovie){\n        const url = new URLSearchParams();\n        url.append('id',id);\n        url.append('isMovie',isMovie);\n        axios.get('http://localhost:8080/MochiCine/GetDescription?'+url).then(response => this.getDescription(response));\n    \n    }\n\n    getDescription(rep){\n        if(rep.data != null){\n            if(rep.data[\"code\"]){\n                window.confirm(this.state.textError);\n            }else{\n                this.props.getDescriptionPage(rep.data[\"info\"]);\n            } \n        }\n    }\n\n    \n    render(){\n\n\n        \n        //On affiche les séries\n        let series = this.state.seriesListe.map(ex => {\n            //console.log(ex);\n            //console.log(ex.id);\n\n            // Pour la mise a jour fav : Si pas un favoris de l'utilisateur favEmpty logo sinon favFull\n            let favImg=<img src={favEmpty} alt=\"favEmpty\" width=\"20%\" height=\"20%\" />;\n            if (Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.id)){\n                favImg=<img src={favFull} alt=\"favFull\" width=\"20%\" height=\"20%\" />;\n            }\n\n            //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n            let nomRestreint=ex.name;\n             if (ex.name.length>20){\n                nomRestreint=ex.name.substring(0,15)+\"...\";\n            }\n\n            let boxFav=<div></div>\n            if(this.props.isConnected === true){\n               boxFav = <div>\n                           {favImg}\n                           <button id= \"addfavS\" className=\" btnfav btn btn-rounded waves-effect\" onClick={() => this.addToFavoris(ex)} >Ajouter</button>\n                       </div>\n            } \n        \n\n\n            const note=(ex.vote_average*5)/10;\n                return(\n                    \n                    <div className=\"bloc rounded-lg\" key={ex.id} > \n                        <img src={\"https://image.tmdb.org/t/p/w500/\"+ex.backdrop_path} alt={\"pic_of_\"+ex.name}  onClick={() => this.props.getDescriptionPage(ex)}  width=\"100%\" height=\"150\"/>\n                        <div className=\"stars\">\n                            <StarRatings rating={note} starRatedColor=\"yellow\" numberOfStars={5} name='rating' starDimension=\"20px\"starSpacing=\"1px\">\n                            </StarRatings>\n                        </div>\n                        <div className=\"titre\">\n                            <a id={ex.id} onClick={() => this.handleDescriptionPage(ex.id, \"false\")} >{nomRestreint}</a>\n                            {boxFav}\n                        </div>\n                    </div>\n                   \n                )\n                \n        })\n        //On affiche les films\n        let films = this.state.filmsListe.map(ex => {\n\n            // Pour la mise a jour fav : Si pas un favoris de l'utilisateur favEmpty logo sinon favFull\n            let favImg=<img src={favEmpty} alt=\"favEmpty\" width=\"20%\" height=\"20%\" />;\n            if (Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.id)){\n                favImg=<img src={favFull} alt=\"favFull\" width=\"20%\" height=\"20%\" />;\n            }\n\n            //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n            let nomRestreint=ex.title;\n             if (ex.title.length>20){\n                nomRestreint=ex.title.substring(0,15)+\"...\";\n            }\n\n            let boxFav=<div></div>\n            if(this.props.isConnected === true){\n               boxFav = <div>\n                           {favImg}\n                           <button id= \"addfavS\" className=\" btnfav btn btn-rounded waves-effect\" onClick={() => this.addToFavoris(ex)} >Ajouter</button>\n                       </div>\n            } \n\n            const note= (ex.vote_average*5)/10;\n\n            if(ex.backdrop_path!==null && ex.backdrop_path!==undefined){\n                return(\n                    \n                    <div className=\"bloc rounded-lg\" key={ex.id}> \n                        <img src={\"https://image.tmdb.org/t/p/w500/\"+ex.backdrop_path} alt={\"pic_of_\"+ex.title} width=\"100%\" height=\"150\"/>\n                        <div className=\"stars\">\n                            <StarRatings rating={note} starRatedColor=\"yellow\" numberOfStars={5} name='rating' starDimension=\"20px\"starSpacing=\"1px\">\n                            </StarRatings>\n                        </div>\n                        <div className=\"titre\">\n                            <a id={ex.id} onClick={() => this.handleDescriptionPage(ex.id, \"true\")} >{nomRestreint}</a>\n                            {boxFav}\n                        </div>\n                    </div>\n                   \n                )\n            }    \n        })\n\n\n        \n        //console.log(tmp);\n        //axios.get(\"https://api.themoviedb.org/3/tv/airing_today?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> this.constr(res));\n        return (\n            <div className=\"Rectangle\">\n                <div className=\"Jours\">\n                    <strong> Sortie des series des 7 derniers jours</strong>\n                </div>\n               {series}\n                <div className=\"Jours\">\n                    <strong> Films sorties en 2020 </strong>\n                </div>\n                {films}\n            </div>  \n        )\n    }\n}\n\nexport default Calendrier;"]},"metadata":{},"sourceType":"module"}