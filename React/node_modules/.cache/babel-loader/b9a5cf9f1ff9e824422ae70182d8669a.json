{"ast":null,"code":"var _jsxFileName = \"/home/neko/git/MochiCine/React/src/Calendrier.js\";\nimport React, { Component } from 'react';\nimport './Calendrier.css';\nimport axios from 'axios';\nimport StarRatings from '../node_modules/react-star-ratings';\nimport favEmpty from './icons/favEmpty.png';\nimport favFull from './icons/favFull.png';\n\nclass Calendrier extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      seriesListe: [],\n      filmsListe: [],\n      UserFavs: this.props.listFavoris\n    }; //this.addToFavoris=this.addToFavoris.bind();\n  }\n\n  componentDidMount() {\n    console.log(\"Amount Calendrier\", this.state.UserFavs); //Today release\n    //axios.get(\"https://api.themoviedb.org/3/tv/airing_today?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> this.constr(res));\n    //Future release\n\n    axios.get(\"http://localhost:8080/MochiCine/SerieOfTheWeek\").then(res => this.setState({\n      seriesListe: res.data.data\n    }));\n    axios.get(\"http://localhost:8080/MochiCine/FilmsOnAir\").then(res => this.setState({\n      filmsListe: res.data.data\n    }));\n    /*\n    axios.get(\"https://api.themoviedb.org/3/tv/on_the_air?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> res.data.results).then(\n        ex => {\n            \n            //Find the serie to find the date of the last episode\n            //Cette partie est importante car on récupère beaucoup plus d'informations sur chacune des séries, que la requete précédente.\n            ex.map( key =>\n                axios.get(\"https://api.themoviedb.org/3/tv/\"+key.id+\"?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US\").then(\n                v => {\n                    \n                let tvserie=v.data;\n                let exdate= new Date(tvserie.last_air_date);\n                exdate.setHours(0,0,0,0);\n                //console.log(exdate);\n                //console.log(today.getTime()+\"==\"+exdate.getTime());\n                //if (today.getTime()===exdate.getTime()) \n                    //{   \n                        //Black Magic\n                        this.setState({lundiListe: [...this.state.lundiListe, tvserie]});\n                    //} \n                })\n            )\n                \n            });\n    //console.log(this.state.lundiListe);\n    //this.setState({lundiListe: mo});\n    */\n  } //Si series dans les favoris d'une utilisateur, coeur rempli sinon vide\n\n\n  handleAddFav(id, title, isSerie) {\n    this.state.UserFavs.push(title);\n    console.log(\"addCalendrier\", this.state.UserFavs);\n    this.props.addFavoris(id, title, isSerie);\n  }\n\n  handleDeleteFav(id, title, isSerie) {\n    /*\n    const list = Object.assign([], this.state.isFavoris);\n    list.filter(item => item !== title);\n    this.setState({UserFavs: list})*/\n    this.props.addFavoris(id, title, isSerie);\n  } // GESTION DESCRIPTION PAGE\n\n\n  handleDescriptionPage(id, isMovie) {\n    const url = new URLSearchParams();\n    url.append('id', id);\n    url.append('isMovie', isMovie);\n    axios.get('http://localhost:8080/MochiCine/GetDescription?' + url).then(response => this.getDescription(response));\n  }\n\n  getDescription(rep) {\n    console.log(\"data of Description: \", rep.data);\n\n    if (rep.data != null) {\n      if (rep.data[\"code\"]) {\n        window.confirm(this.state.textError);\n      } else {\n        this.props.getDescriptionPage(rep.data[\"info\"]);\n      }\n    }\n  }\n\n  render() {\n    /* /!\\ POUR LAETITIA \n         Re bonjour Laeti (ou re bonsoir), j'ai mit en place le bouton favoris ligne 123 et ligne 167. Le onClick est juste une alert,\n         tu peux le retirer pour y mettre les fonctions dont tu as besoin pour l'ajout ou la supression de favoris. La condition du if \n         est à false (C'était pour des test). La vrai condition pour ligne 152 serait quelque chose du genre : if (this.props.isFavoris.includes (ex.id)).\n         Ca verfie que l'id est présent (ou non) dans la liste des favoris.\n         Bon courage :doublepoucelevé:\n     */\n    //On affiche les séries\n    let series = this.state.seriesListe.map(ex => {\n      //console.log(ex);\n      //console.log(ex.id);\n      //Pour le button des favoris afficher si seulement si l'utilisateur est connecter\n      let boxFav = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 24\n        }\n      });\n\n      if (this.props.isConnected === true) {\n        // Pour la mise a jour fav : Si pas un favoris de l'utilisateur favEmpty logo sinon favFull\n        let favImg = /*#__PURE__*/React.createElement(\"img\", {\n          src: favEmpty,\n          alt: \"favEmpty\",\n          width: \"20%\",\n          height: \"20%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 28\n          }\n        }); //Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.id)\n\n        if (this.state.UserFavs.includes(ex.original_name)) {\n          favImg = /*#__PURE__*/React.createElement(\"img\", {\n            src: favFull,\n            alt: \"favFull\",\n            width: \"20%\",\n            height: \"20%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 28\n            }\n          });\n          boxFav = /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 30\n            }\n          }, \" \", favImg, /*#__PURE__*/React.createElement(\"button\", {\n            id: \"deletefavS\",\n            className: \" btnfav btn btn-rounded waves-effect\",\n            onClick: () => this.handleDeleteFav(ex.id, ex.original_name, \"true\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 33\n            }\n          }, \"Ajouter\"));\n        } else {\n          boxFav = /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 30\n            }\n          }, \" \", favImg, /*#__PURE__*/React.createElement(\"button\", {\n            id: \"addfavS\",\n            className: \" btnfav btn btn-rounded waves-effect\",\n            onClick: () => this.handleAddFav(ex.id, ex.original_name, \"true\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 33\n            }\n          }, \"Ajouter\"));\n        }\n      } //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n\n\n      let nomRestreint = ex.original_name;\n\n      if (ex.original_name.length > 20) {\n        nomRestreint = ex.original_name.substring(0, 15) + \"...\";\n      }\n\n      const note = ex.vote_average * 5 / 10;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"bloc rounded-lg\",\n        key: ex.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: \"https://image.tmdb.org/t/p/w500/\" + ex.backdrop_path,\n        alt: \"pic_of_\" + ex.name,\n        onClick: () => this.handleDescriptionPage(ex.id, \"false\"),\n        width: \"100%\",\n        height: \"150\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"stars\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(StarRatings, {\n        rating: note,\n        starRatedColor: \"yellow\",\n        numberOfStars: 5,\n        name: \"rating\",\n        starDimension: \"20px\",\n        starSpacing: \"1px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"titre\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        id: ex.id,\n        onClick: () => this.handleDescriptionPage(ex.id, \"false\"),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 29\n        }\n      }, nomRestreint), boxFav));\n    }); //On affiche les films\n\n    let films = this.state.filmsListe.map(ex => {\n      let boxFav = /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 24\n        }\n      });\n\n      if (this.props.isConnected === true) {\n        // Pour la mise a jour fav : Si pas un favoris de l'utilisateur favEmpty logo sinon favFull\n        let favImg = /*#__PURE__*/React.createElement(\"img\", {\n          src: favEmpty,\n          alt: \"favEmpty\",\n          width: \"20%\",\n          height: \"20%\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 28\n          }\n        });\n\n        if (this.state.UserFavs.includes(ex.original_title)) {\n          favImg = /*#__PURE__*/React.createElement(\"img\", {\n            src: favFull,\n            alt: \"favFull\",\n            width: \"20%\",\n            height: \"20%\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 28\n            }\n          });\n          boxFav = /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 30\n            }\n          }, favImg, /*#__PURE__*/React.createElement(\"button\", {\n            id: \"addfavS\",\n            className: \" btnfav btn btn-rounded waves-effect\",\n            onClick: () => this.handleDeleteFav(ex.id, ex.original_title, \"false\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 33\n            }\n          }, \"Ajouter\"));\n        } else {\n          boxFav = /*#__PURE__*/React.createElement(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 30\n            }\n          }, favImg, /*#__PURE__*/React.createElement(\"button\", {\n            id: \"addfavS\",\n            className: \" btnfav btn btn-rounded waves-effect\",\n            onClick: () => this.handleAddFav(ex.id, ex.original_title, \"false\"),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 33\n            }\n          }, \"Ajouter\"));\n        }\n      } //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n\n\n      let nomRestreint = ex.original_title;\n\n      if (ex.original_title.length > 20) {\n        nomRestreint = ex.original_title.substring(0, 15) + \"...\";\n      }\n\n      const note = ex.vote_average * 5 / 10;\n\n      if (ex.backdrop_path !== null && ex.backdrop_path !== undefined) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"bloc rounded-lg\",\n          key: ex.id,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: \"https://image.tmdb.org/t/p/w500/\" + ex.backdrop_path,\n          alt: \"pic_of_\" + ex.title,\n          width: \"100%\",\n          height: \"150\",\n          onClick: () => this.handleDescriptionPage(ex.id, \"true\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 25\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"stars\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(StarRatings, {\n          rating: note,\n          starRatedColor: \"yellow\",\n          numberOfStars: 5,\n          name: \"rating\",\n          starDimension: \"20px\",\n          starSpacing: \"1px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 29\n          }\n        })), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"titre\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"a\", {\n          id: ex.id,\n          onClick: () => this.handleDescriptionPage(ex.id, \"true\"),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 29\n          }\n        }, nomRestreint), boxFav));\n      }\n    }); //console.log(tmp);\n    //axios.get(\"https://api.themoviedb.org/3/tv/airing_today?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> this.constr(res));\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Rectangle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Jours\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 21\n      }\n    }, \" Films sorties en 2020 \")), films, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Jours\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }\n    }, \" Sortie des series des 7 derniers jours\")), series);\n  }\n\n}\n\nexport default Calendrier;","map":{"version":3,"sources":["/home/neko/git/MochiCine/React/src/Calendrier.js"],"names":["React","Component","axios","StarRatings","favEmpty","favFull","Calendrier","constructor","props","state","seriesListe","filmsListe","UserFavs","listFavoris","componentDidMount","console","log","get","then","res","setState","data","handleAddFav","id","title","isSerie","push","addFavoris","handleDeleteFav","handleDescriptionPage","isMovie","url","URLSearchParams","append","response","getDescription","rep","window","confirm","textError","getDescriptionPage","render","series","map","ex","boxFav","isConnected","favImg","includes","original_name","nomRestreint","length","substring","note","vote_average","backdrop_path","name","films","original_title","undefined"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './Calendrier.css';\nimport axios from 'axios';\nimport StarRatings from '../node_modules/react-star-ratings';\nimport favEmpty from './icons/favEmpty.png';\nimport favFull from './icons/favFull.png';\n\nclass Calendrier extends Component{\n\n    constructor(props){\n        super(props);\n        this.state={seriesListe : [], filmsListe: [], UserFavs:this.props.listFavoris};\n        //this.addToFavoris=this.addToFavoris.bind();\n    }\n\n    componentDidMount(){\n        console.log(\"Amount Calendrier\", this.state.UserFavs);\n        \n        //Today release\n        //axios.get(\"https://api.themoviedb.org/3/tv/airing_today?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> this.constr(res));\n        \n        //Future release\n        axios.get(\"http://localhost:8080/MochiCine/SerieOfTheWeek\").then(res=> this.setState({seriesListe: res.data.data}));\n\n        axios.get(\"http://localhost:8080/MochiCine/FilmsOnAir\").then(res=> this.setState({filmsListe: res.data.data}));\n        /*\n        axios.get(\"https://api.themoviedb.org/3/tv/on_the_air?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> res.data.results).then(\n            ex => {\n                \n                //Find the serie to find the date of the last episode\n                //Cette partie est importante car on récupère beaucoup plus d'informations sur chacune des séries, que la requete précédente.\n                ex.map( key =>\n                    axios.get(\"https://api.themoviedb.org/3/tv/\"+key.id+\"?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US\").then(\n                    v => {\n                        \n                    let tvserie=v.data;\n                    let exdate= new Date(tvserie.last_air_date);\n                    exdate.setHours(0,0,0,0);\n                    //console.log(exdate);\n                    //console.log(today.getTime()+\"==\"+exdate.getTime());\n                    //if (today.getTime()===exdate.getTime()) \n                        //{   \n                            //Black Magic\n                            this.setState({lundiListe: [...this.state.lundiListe, tvserie]});\n                        //} \n                    })\n                )\n                    \n                });\n        //console.log(this.state.lundiListe);\n        //this.setState({lundiListe: mo});\n        */\n    }\n\n    \n    //Si series dans les favoris d'une utilisateur, coeur rempli sinon vide\n    handleAddFav(id, title, isSerie){\n        this.state.UserFavs.push(title);\n        console.log(\"addCalendrier\", this.state.UserFavs);\n        this.props.addFavoris(id, title, isSerie)\n    }\n\n    handleDeleteFav(id, title, isSerie){\n        /*\n        const list = Object.assign([], this.state.isFavoris);\n        list.filter(item => item !== title);\n        this.setState({UserFavs: list})*/\n\n        this.props.addFavoris(id, title, isSerie)\n    }\n\n    // GESTION DESCRIPTION PAGE\n    handleDescriptionPage(id, isMovie){\n        const url = new URLSearchParams();\n        url.append('id',id);\n        url.append('isMovie',isMovie);\n        axios.get('http://localhost:8080/MochiCine/GetDescription?'+url).then(response => this.getDescription(response));\n    \n    }\n\n    getDescription(rep){\n        console.log(\"data of Description: \", rep.data);\n        if(rep.data != null){\n            if(rep.data[\"code\"]){\n                window.confirm(this.state.textError);\n            }else{\n                this.props.getDescriptionPage(rep.data[\"info\"]);\n            } \n        }\n    }\n\n    \n    render(){\n\n     \n               /* /!\\ POUR LAETITIA \n                    Re bonjour Laeti (ou re bonsoir), j'ai mit en place le bouton favoris ligne 123 et ligne 167. Le onClick est juste une alert,\n                    tu peux le retirer pour y mettre les fonctions dont tu as besoin pour l'ajout ou la supression de favoris. La condition du if \n                    est à false (C'était pour des test). La vrai condition pour ligne 152 serait quelque chose du genre : if (this.props.isFavoris.includes (ex.id)).\n                    Ca verfie que l'id est présent (ou non) dans la liste des favoris.\n                    Bon courage :doublepoucelevé:\n                */\n        \n        //On affiche les séries\n        let series = this.state.seriesListe.map(ex => {\n            //console.log(ex);\n            //console.log(ex.id);\n\n            //Pour le button des favoris afficher si seulement si l'utilisateur est connecter\n            let boxFav=<div></div>\n            if(this.props.isConnected === true){\n                // Pour la mise a jour fav : Si pas un favoris de l'utilisateur favEmpty logo sinon favFull\n                let favImg=<img src={favEmpty} alt=\"favEmpty\" width=\"20%\" height=\"20%\" />;\n\n                //Array.isArray(this.state.UserFavs) && this.state.UserFavs.includes(ex.id)\n                if (this.state.UserFavs.includes(ex.original_name)){\n                    favImg=<img src={favFull} alt=\"favFull\" width=\"20%\" height=\"20%\" />;\n                    boxFav = <div> {favImg}\n                                <button id= \"deletefavS\" className=\" btnfav btn btn-rounded waves-effect\" onClick={() => this.handleDeleteFav(ex.id, ex.original_name, \"true\")} >Ajouter</button>\n                            </div>\n                }else{\n                    boxFav = <div> {favImg}\n                                <button id= \"addfavS\" className=\" btnfav btn btn-rounded waves-effect\" onClick={() => this.handleAddFav(ex.id,ex.original_name, \"true\")} >Ajouter</button>\n                            </div>\n                }\n             } \n\n\n\n\n\n            //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n            let nomRestreint=ex.original_name;\n             if (ex.original_name.length>20){\n                nomRestreint=ex.original_name.substring(0,15)+\"...\";\n            }\n\n\n        \n\n\n            const note=(ex.vote_average*5)/10;\n                return(\n                    \n                    <div className=\"bloc rounded-lg\" key={ex.id} > \n                        <img src={\"https://image.tmdb.org/t/p/w500/\"+ex.backdrop_path} alt={\"pic_of_\"+ex.name}  onClick={() =>  this.handleDescriptionPage(ex.id, \"false\")}  width=\"100%\" height=\"150\"/>\n                        <div className=\"stars\">\n                            <StarRatings rating={note} starRatedColor=\"yellow\" numberOfStars={5} name='rating' starDimension=\"20px\"starSpacing=\"1px\">\n                            </StarRatings>\n                        </div>\n                        <div className=\"titre\">\n                            <a id={ex.id} onClick={() => this.handleDescriptionPage(ex.id, \"false\")} >{nomRestreint}</a>\n                            {boxFav}\n                        </div>\n                    </div>\n                   \n                )\n                \n        })\n        //On affiche les films\n        let films = this.state.filmsListe.map(ex => {\n\n            let boxFav=<div></div>\n            if(this.props.isConnected === true){\n                // Pour la mise a jour fav : Si pas un favoris de l'utilisateur favEmpty logo sinon favFull\n                let favImg=<img src={favEmpty} alt=\"favEmpty\" width=\"20%\" height=\"20%\" />;\n                if (this.state.UserFavs.includes(ex.original_title)){\n                    favImg=<img src={favFull} alt=\"favFull\" width=\"20%\" height=\"20%\" />;\n\n                    boxFav = <div>{favImg}\n                                <button id= \"addfavS\" className=\" btnfav btn btn-rounded waves-effect\" onClick={() => this.handleDeleteFav(ex.id, ex.original_title, \"false\")} >Ajouter</button>\n                            </div>\n                }else{\n                    boxFav = <div>{favImg}\n                                <button id= \"addfavS\" className=\" btnfav btn btn-rounded waves-effect\" onClick={() => this.handleAddFav(ex.id, ex.original_title, \"false\")} >Ajouter</button>\n                            </div>\n                }\n\n            } \n\n\n\n            //Pour les nom de plus de 20 caractere (Evite de surcharger l'écran d'informations)\n            let nomRestreint=ex.original_title;\n             if (ex.original_title.length>20){\n                nomRestreint=ex.original_title.substring(0,15)+\"...\";\n            }\n\n\n\n\n            const note= (ex.vote_average*5)/10;\n\n            if(ex.backdrop_path!==null && ex.backdrop_path!==undefined){\n                return(\n                    \n                    <div className=\"bloc rounded-lg\" key={ex.id}> \n                        <img src={\"https://image.tmdb.org/t/p/w500/\"+ex.backdrop_path} alt={\"pic_of_\"+ex.title} width=\"100%\" height=\"150\" onClick={() => this.handleDescriptionPage(ex.id, \"true\")}/>\n                        <div className=\"stars\">\n                            <StarRatings rating={note} starRatedColor=\"yellow\" numberOfStars={5} name='rating' starDimension=\"20px\"starSpacing=\"1px\">\n                            </StarRatings>\n                        </div>\n                        <div className=\"titre\">\n                            <a id={ex.id} onClick={() => this.handleDescriptionPage(ex.id, \"true\")} >{nomRestreint}</a>\n                            {boxFav}\n                        </div>\n                    </div>\n                   \n                )\n            }    \n        })\n\n\n        \n        //console.log(tmp);\n        //axios.get(\"https://api.themoviedb.org/3/tv/airing_today?api_key=a3be1be132d237a0716cc27bdae1b2f0&language=en-US&page=1\").then(res=> this.constr(res));\n        return (\n            <div className=\"Rectangle\">\n                <div className=\"Jours\">\n                    <strong> Films sorties en 2020 </strong>\n                </div>\n                {films}\n                <div className=\"Jours\">\n                    <strong> Sortie des series des 7 derniers jours</strong>\n                </div>\n               {series}\n\n            </div>  \n        )\n    }\n}\n\nexport default Calendrier;"]},"metadata":{},"sourceType":"module"}